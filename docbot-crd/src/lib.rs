use chrono::Utc;
use futures::{StreamExt, TryStreamExt};
use k8s_openapi::api::apps::v1::Deployment;
use k8s_openapi::api::core::v1::PodTemplate;
use k8s_openapi::api::core::v1::PodTemplateSpec;
use k8s_openapi::apimachinery::pkg::apis::meta::v1::ObjectMeta;
use k8s_openapi::chrono;
use kube::{api::ListParams, client::Client, core::WatchEvent, Api, CustomResource};
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;
use tokio::sync::mpsc;
use tracing::{info, error};

/// The default job ttl is 72 hours.
fn default_job_ttl_seconds_after_finished() -> Option<i32> {
    Some(259200)
}

/// Struct corresponding to the Specification (`spec`) part of the `DeploymentHook` resource,
/// directly reflects context of the `deploymenthooks.apps.mx.com.yaml` file to be found in
/// this repository.
/// The `DeploymentHook` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[serde(rename_all = "camelCase")]
#[kube(
    group = "apps.mx.com",
    version = "v1",
    kind = "DeploymentHook",
    plural = "deploymenthooks",
    derive = "PartialEq",
    namespaced
)]
pub struct DeploymentHookSpec {
    pub selector: DeploymentSelector,
    pub template: InternalPodTemplate,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[serde(rename_all = "camelCase")]
pub struct DeploymentSelector {
    pub labels: BTreeMap<String, String>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[serde(rename_all = "camelCase")]
pub struct InternalPodTemplate {
    #[serde(default = "default_job_ttl_seconds_after_finished")]
    pub ttl_seconds_after_finished: Option<i32>,
    pub name: Option<String>,
    pub spec: Option<PodTemplateSpec>,
}

impl DeploymentHook {
    pub async fn get_pod_template(
        &self,
        client: Client,
    ) -> Result<PodTemplate, Box<dyn std::error::Error>> {
        // Check to see if the template was embedded in the struct.
        if let Some(ref template) = self.spec.template.spec {
            // HACK: Mock a PodTemplate for now to keep things simple.
            return Ok(PodTemplate {
                metadata: ObjectMeta {
                    namespace: self.metadata.namespace.clone(),
                    ..ObjectMeta::default()
                },
                template: Some(template.clone()),
            });
        }
        // Otherwise use the name to look it up via the k8s api.
        let pod_template_api: Api<PodTemplate> = Api::namespaced(
            client,
            &self
                .metadata
                .namespace
                .clone()
                .unwrap_or_else(|| "default".to_string()),
        );
        
        if let Some(ref name) = self.spec.template.name {
            let lp = ListParams::default().fields(&format!("metadata.name={}", name)); // Filter by name
            let (tx, mut rx) = mpsc::channel::<WatchEvent<PodTemplate>>(25); // Using a buffer size of 25
            // create a non blocking event stream and sent the events via buffered channel of size 25
            tokio::spawn({
                let pod_template_api = pod_template_api.clone();
                async move {
                    let mut stream = pod_template_api
                        .watch(&lp, "0")
                        .await
                        .expect("Failed to initialize watcher")
                        .boxed();

                    while let Some(event) = stream.try_next().await.expect("Failed to watch") {
                        if tx.send(event).await.is_err() {
                            break;
                        }
                    }
                }
            });

            let mut specific_pod_template: Option<PodTemplate> = None;

            while let Some(event) = rx.recv().await {
                match event {
                    WatchEvent::Added(pod_template) => {
                        specific_pod_template = Some(pod_template);
                    }
                    WatchEvent::Modified(pod_template) => {
                        specific_pod_template = Some(pod_template); // Override stored PodTemplate on modification
                    }
                    WatchEvent::Deleted(_) => {
                       // We don't care about delete
                    }
                    WatchEvent::Error(e) => {
                        error!("Error: {:?}", e);
                        
                    }
                    _ => {}
                }
            }

            match &specific_pod_template {
                Some(template) => {
                    let pod_time = template
                        .metadata
                        .creation_timestamp
                        .as_ref()
                        .ok_or("No timestamp in podTemplate")?;
                    let generation = template
                        .metadata
                        .generation
                        .as_ref()
                        .ok_or("No generation in podTemplate")?;

                    info!(
                        "Current time: {:?} vs podTemplate time: {:?} with generation {:?}",
                        Utc::now().to_rfc3339(),
                        pod_time,
                        generation
                    );

                    if let Some(pod_spec) = template.template.as_ref().and_then(|t| t.spec.as_ref())
                    {
                        for container in &pod_spec.containers {
                            info!(
                                "Container Image for template {} in namespace {:?} from k8s api {} : {:?}",
                                name,
                                self.metadata.namespace,
                                container.name,
                                container.image
                            );
                        }
                    } else {
                        info!("No PodTemplate spec found for '{}'", name);
                    }

                    return Ok(specific_pod_template.expect("Error empty podtemplate"));
                }
                None => {}
            }
        }

        Err(format!(
            "Could not find a way to return a pod template for deployment hook {:?}",
            self.metadata.name
        )
        .into())
    }

    pub fn does_match_deployment(&self, deployment: &Deployment) -> bool {
        if let Some(ref labels) = deployment.metadata.labels {
            self.spec
                .selector
                .labels
                .iter()
                .all(|hook_label| labels.get_key_value(hook_label.0) == Some(hook_label))
        } else {
            false
        }
    }
}
